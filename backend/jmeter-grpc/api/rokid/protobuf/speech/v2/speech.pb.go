// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: speech.proto

package v2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	v1 "smartvoice/api/rokid/protobuf/common/v1"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of speech_types.proto.

type SpeechErrorCode = v1.SpeechErrorCode

const SpeechErrorCode_SUCCESS = v1.SpeechErrorCode_SUCCESS
const SpeechErrorCode_UNAUTHENTICATED = v1.SpeechErrorCode_UNAUTHENTICATED
const SpeechErrorCode_CONNECTION_EXCEED = v1.SpeechErrorCode_CONNECTION_EXCEED
const SpeechErrorCode_RESOURCE_EXHASTED = v1.SpeechErrorCode_RESOURCE_EXHASTED
const SpeechErrorCode_BUSY = v1.SpeechErrorCode_BUSY
const SpeechErrorCode_INTERNAL = v1.SpeechErrorCode_INTERNAL
const SpeechErrorCode_VAD_TIMEOUT = v1.SpeechErrorCode_VAD_TIMEOUT
const SpeechErrorCode_NLP_EMPTY = v1.SpeechErrorCode_NLP_EMPTY

var SpeechErrorCode_name = v1.SpeechErrorCode_name
var SpeechErrorCode_value = v1.SpeechErrorCode_value

type ReqType = v1.ReqType

const ReqType_START = v1.ReqType_START
const ReqType_VOICE = v1.ReqType_VOICE
const ReqType_END = v1.ReqType_END
const ReqType_TEXT = v1.ReqType_TEXT
const ReqType_ONESHOT = v1.ReqType_ONESHOT

var ReqType_name = v1.ReqType_name
var ReqType_value = v1.ReqType_value

type Codec = v1.Codec

const Codec_PCM = v1.Codec_PCM
const Codec_OPU = v1.Codec_OPU
const Codec_OPU2 = v1.Codec_OPU2
const Codec_OPUS = v1.Codec_OPUS
const Codec_AMRNB = v1.Codec_AMRNB
const Codec_AMRWB = v1.Codec_AMRWB
const Codec_PCM8K = v1.Codec_PCM8K

var Codec_name = v1.Codec_name
var Codec_value = v1.Codec_value

type PingPayload = v1.PingPayload

type RespType int32

const (
	// 中间结果 asr extra
	RespType_INTERMEDIATE RespType = 0
	// asr最终结果
	RespType_ASR_FINISH RespType = 1
	// 请求完成, 如果SpeechOptions.no_nlp = false，Response包中带有nlp, action结果
	RespType_FINISH RespType = 2
)

// Enum value maps for RespType.
var (
	RespType_name = map[int32]string{
		0: "INTERMEDIATE",
		1: "ASR_FINISH",
		2: "FINISH",
	}
	RespType_value = map[string]int32{
		"INTERMEDIATE": 0,
		"ASR_FINISH":   1,
		"FINISH":       2,
	}
)

func (x RespType) Enum() *RespType {
	p := new(RespType)
	*p = x
	return p
}

func (x RespType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespType) Descriptor() protoreflect.EnumDescriptor {
	return file_speech_proto_enumTypes[0].Descriptor()
}

func (RespType) Type() protoreflect.EnumType {
	return &file_speech_proto_enumTypes[0]
}

func (x RespType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RespType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RespType(num)
	return nil
}

// Deprecated: Use RespType.Descriptor instead.
func (RespType) EnumDescriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{0}
}

type Lang int32

const (
	Lang_ZH Lang = 0
	Lang_EN Lang = 1
)

// Enum value maps for Lang.
var (
	Lang_name = map[int32]string{
		0: "ZH",
		1: "EN",
	}
	Lang_value = map[string]int32{
		"ZH": 0,
		"EN": 1,
	}
)

func (x Lang) Enum() *Lang {
	p := new(Lang)
	*p = x
	return p
}

func (x Lang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lang) Descriptor() protoreflect.EnumDescriptor {
	return file_speech_proto_enumTypes[1].Descriptor()
}

func (Lang) Type() protoreflect.EnumType {
	return &file_speech_proto_enumTypes[1]
}

func (x Lang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Lang) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Lang(num)
	return nil
}

// Deprecated: Use Lang.Descriptor instead.
func (Lang) EnumDescriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{1}
}

type VadMode int32

const (
	// 客户端决定vad_start, vad_end
	VadMode_LOCAL VadMode = 0
	// 云端决定vad_start, vad_end
	VadMode_CLOUD VadMode = 1
)

// Enum value maps for VadMode.
var (
	VadMode_name = map[int32]string{
		0: "LOCAL",
		1: "CLOUD",
	}
	VadMode_value = map[string]int32{
		"LOCAL": 0,
		"CLOUD": 1,
	}
)

func (x VadMode) Enum() *VadMode {
	p := new(VadMode)
	*p = x
	return p
}

func (x VadMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VadMode) Descriptor() protoreflect.EnumDescriptor {
	return file_speech_proto_enumTypes[2].Descriptor()
}

func (VadMode) Type() protoreflect.EnumType {
	return &file_speech_proto_enumTypes[2]
}

func (x VadMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VadMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VadMode(num)
	return nil
}

// Deprecated: Use VadMode.Descriptor instead.
func (VadMode) EnumDescriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{2}
}

type SpeechOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zh
	// en
	Lang *Lang `protobuf:"varint,1,req,name=lang,enum=rokid.open.speech.v2.Lang" json:"lang,omitempty"`
	// pcm
	// opu
	// opu2
	Codec             *v1.Codec `protobuf:"varint,2,req,name=codec,enum=rokid.open.speech.v1.Codec" json:"codec,omitempty"`
	VadMode           *VadMode  `protobuf:"varint,3,req,name=vad_mode,json=vadMode,enum=rokid.open.speech.v2.VadMode" json:"vad_mode,omitempty"`
	VendTimeout       *uint32   `protobuf:"varint,4,opt,name=vend_timeout,json=vendTimeout" json:"vend_timeout,omitempty"`
	NoNlp             *bool     `protobuf:"varint,5,req,name=no_nlp,json=noNlp" json:"no_nlp,omitempty"`
	NoIntermediateAsr *bool     `protobuf:"varint,6,req,name=no_intermediate_asr,json=noIntermediateAsr" json:"no_intermediate_asr,omitempty"`
	Stack             *string   `protobuf:"bytes,7,opt,name=stack" json:"stack,omitempty"`
	VoiceTrigger      *string   `protobuf:"bytes,8,opt,name=voice_trigger,json=voiceTrigger" json:"voice_trigger,omitempty"`
	VoicePower        *float32  `protobuf:"fixed32,9,opt,name=voice_power,json=voicePower" json:"voice_power,omitempty"`
	TriggerStart      *uint32   `protobuf:"varint,10,opt,name=trigger_start,json=triggerStart" json:"trigger_start,omitempty"`
	TriggerLength     *uint32   `protobuf:"varint,11,opt,name=trigger_length,json=triggerLength" json:"trigger_length,omitempty"`
	// json string: options of skills
	// {
	//   "media_player_status": "xxx"
	// }
	SkillOptions     *string `protobuf:"bytes,12,opt,name=skill_options,json=skillOptions" json:"skill_options,omitempty"`
	VoiceExtra       *string `protobuf:"bytes,13,opt,name=voice_extra,json=voiceExtra" json:"voice_extra,omitempty"`
	VadBegin         *uint32 `protobuf:"varint,14,opt,name=vad_begin,json=vadBegin" json:"vad_begin,omitempty"`
	NoTriggerConfirm *bool   `protobuf:"varint,15,opt,name=no_trigger_confirm,json=noTriggerConfirm" json:"no_trigger_confirm,omitempty"`
	Itn              *bool   `protobuf:"varint,16,opt,name=itn" json:"itn,omitempty"`
}

func (x *SpeechOptions) Reset() {
	*x = SpeechOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speech_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechOptions) ProtoMessage() {}

func (x *SpeechOptions) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechOptions.ProtoReflect.Descriptor instead.
func (*SpeechOptions) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{0}
}

func (x *SpeechOptions) GetLang() Lang {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return Lang_ZH
}

func (x *SpeechOptions) GetCodec() v1.Codec {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return v1.Codec_PCM
}

func (x *SpeechOptions) GetVadMode() VadMode {
	if x != nil && x.VadMode != nil {
		return *x.VadMode
	}
	return VadMode_LOCAL
}

func (x *SpeechOptions) GetVendTimeout() uint32 {
	if x != nil && x.VendTimeout != nil {
		return *x.VendTimeout
	}
	return 0
}

func (x *SpeechOptions) GetNoNlp() bool {
	if x != nil && x.NoNlp != nil {
		return *x.NoNlp
	}
	return false
}

func (x *SpeechOptions) GetNoIntermediateAsr() bool {
	if x != nil && x.NoIntermediateAsr != nil {
		return *x.NoIntermediateAsr
	}
	return false
}

func (x *SpeechOptions) GetStack() string {
	if x != nil && x.Stack != nil {
		return *x.Stack
	}
	return ""
}

func (x *SpeechOptions) GetVoiceTrigger() string {
	if x != nil && x.VoiceTrigger != nil {
		return *x.VoiceTrigger
	}
	return ""
}

func (x *SpeechOptions) GetVoicePower() float32 {
	if x != nil && x.VoicePower != nil {
		return *x.VoicePower
	}
	return 0
}

func (x *SpeechOptions) GetTriggerStart() uint32 {
	if x != nil && x.TriggerStart != nil {
		return *x.TriggerStart
	}
	return 0
}

func (x *SpeechOptions) GetTriggerLength() uint32 {
	if x != nil && x.TriggerLength != nil {
		return *x.TriggerLength
	}
	return 0
}

func (x *SpeechOptions) GetSkillOptions() string {
	if x != nil && x.SkillOptions != nil {
		return *x.SkillOptions
	}
	return ""
}

func (x *SpeechOptions) GetVoiceExtra() string {
	if x != nil && x.VoiceExtra != nil {
		return *x.VoiceExtra
	}
	return ""
}

func (x *SpeechOptions) GetVadBegin() uint32 {
	if x != nil && x.VadBegin != nil {
		return *x.VadBegin
	}
	return 0
}

func (x *SpeechOptions) GetNoTriggerConfirm() bool {
	if x != nil && x.NoTriggerConfirm != nil {
		return *x.NoTriggerConfirm
	}
	return false
}

func (x *SpeechOptions) GetItn() bool {
	if x != nil && x.Itn != nil {
		return *x.Itn
	}
	return false
}

type SpeechRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32         `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Type    *v1.ReqType    `protobuf:"varint,2,req,name=type,enum=rokid.open.speech.v1.ReqType" json:"type,omitempty"`
	Voice   []byte         `protobuf:"bytes,3,opt,name=voice" json:"voice,omitempty"`
	Asr     *string        `protobuf:"bytes,4,opt,name=asr" json:"asr,omitempty"`
	Options *SpeechOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (x *SpeechRequest) Reset() {
	*x = SpeechRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speech_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechRequest) ProtoMessage() {}

func (x *SpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechRequest.ProtoReflect.Descriptor instead.
func (*SpeechRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{1}
}

func (x *SpeechRequest) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SpeechRequest) GetType() v1.ReqType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return v1.ReqType_START
}

func (x *SpeechRequest) GetVoice() []byte {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *SpeechRequest) GetAsr() string {
	if x != nil && x.Asr != nil {
		return *x.Asr
	}
	return ""
}

func (x *SpeechRequest) GetOptions() *SpeechOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type SpeechResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *int32              `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Type   *RespType           `protobuf:"varint,2,req,name=type,enum=rokid.open.speech.v2.RespType" json:"type,omitempty"`
	Result *v1.SpeechErrorCode `protobuf:"varint,3,req,name=result,enum=rokid.open.speech.v1.SpeechErrorCode" json:"result,omitempty"`
	Asr    *string             `protobuf:"bytes,4,opt,name=asr" json:"asr,omitempty"`
	Nlp    *string             `protobuf:"bytes,5,opt,name=nlp" json:"nlp,omitempty"`
	Action *string             `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	// {
	//   "activation": "fake|reject|accept|none"
	// }
	Extra *string `protobuf:"bytes,7,opt,name=extra" json:"extra,omitempty"`
}

func (x *SpeechResponse) Reset() {
	*x = SpeechResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speech_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechResponse) ProtoMessage() {}

func (x *SpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechResponse.ProtoReflect.Descriptor instead.
func (*SpeechResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{2}
}

func (x *SpeechResponse) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SpeechResponse) GetType() RespType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RespType_INTERMEDIATE
}

func (x *SpeechResponse) GetResult() v1.SpeechErrorCode {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return v1.SpeechErrorCode_SUCCESS
}

func (x *SpeechResponse) GetAsr() string {
	if x != nil && x.Asr != nil {
		return *x.Asr
	}
	return ""
}

func (x *SpeechResponse) GetNlp() string {
	if x != nil && x.Nlp != nil {
		return *x.Nlp
	}
	return ""
}

func (x *SpeechResponse) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *SpeechResponse) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

var File_speech_proto protoreflect.FileDescriptor

var file_speech_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x72, 0x6f, 0x6b, 0x69, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x76, 0x32, 0x1a, 0x12, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x04, 0x0a, 0x0d, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6b, 0x69, 0x64,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6b, 0x69,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x38, 0x0a,
	0x08, 0x76, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x6f, 0x6b, 0x69, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x76, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f,
	0x5f, 0x6e, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x4e, 0x6c,
	0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x11,
	0x6e, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x61, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x61, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x74,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x74, 0x6e, 0x22, 0xb9, 0x01, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x6f, 0x6b, 0x69, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x6b,
	0x69, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x6f, 0x6b, 0x69,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x6f, 0x6b, 0x69, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x73, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e,
	0x6c, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x2a, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x53, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x16, 0x0a, 0x04, 0x4c, 0x61,
	0x6e, 0x67, 0x12, 0x06, 0x0a, 0x02, 0x5a, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e,
	0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x07, 0x56, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x10, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x78, 0x6c, 0x72, 0x6f, 0x6b, 0x69, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x76,
	0x32, 0x3b, 0x76, 0x32, 0x50, 0x00,
}

var (
	file_speech_proto_rawDescOnce sync.Once
	file_speech_proto_rawDescData = file_speech_proto_rawDesc
)

func file_speech_proto_rawDescGZIP() []byte {
	file_speech_proto_rawDescOnce.Do(func() {
		file_speech_proto_rawDescData = protoimpl.X.CompressGZIP(file_speech_proto_rawDescData)
	})
	return file_speech_proto_rawDescData
}

var file_speech_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_speech_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_speech_proto_goTypes = []interface{}{
	(RespType)(0),           // 0: rokid.open.speech.v2.RespType
	(Lang)(0),               // 1: rokid.open.speech.v2.Lang
	(VadMode)(0),            // 2: rokid.open.speech.v2.VadMode
	(*SpeechOptions)(nil),   // 3: rokid.open.speech.v2.SpeechOptions
	(*SpeechRequest)(nil),   // 4: rokid.open.speech.v2.SpeechRequest
	(*SpeechResponse)(nil),  // 5: rokid.open.speech.v2.SpeechResponse
	(v1.Codec)(0),           // 6: rokid.open.speech.v1.Codec
	(v1.ReqType)(0),         // 7: rokid.open.speech.v1.ReqType
	(v1.SpeechErrorCode)(0), // 8: rokid.open.speech.v1.SpeechErrorCode
}
var file_speech_proto_depIdxs = []int32{
	1, // 0: rokid.open.speech.v2.SpeechOptions.lang:type_name -> rokid.open.speech.v2.Lang
	6, // 1: rokid.open.speech.v2.SpeechOptions.codec:type_name -> rokid.open.speech.v1.Codec
	2, // 2: rokid.open.speech.v2.SpeechOptions.vad_mode:type_name -> rokid.open.speech.v2.VadMode
	7, // 3: rokid.open.speech.v2.SpeechRequest.type:type_name -> rokid.open.speech.v1.ReqType
	3, // 4: rokid.open.speech.v2.SpeechRequest.options:type_name -> rokid.open.speech.v2.SpeechOptions
	0, // 5: rokid.open.speech.v2.SpeechResponse.type:type_name -> rokid.open.speech.v2.RespType
	8, // 6: rokid.open.speech.v2.SpeechResponse.result:type_name -> rokid.open.speech.v1.SpeechErrorCode
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_speech_proto_init() }
func file_speech_proto_init() {
	if File_speech_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speech_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speech_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speech_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speech_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_speech_proto_goTypes,
		DependencyIndexes: file_speech_proto_depIdxs,
		EnumInfos:         file_speech_proto_enumTypes,
		MessageInfos:      file_speech_proto_msgTypes,
	}.Build()
	File_speech_proto = out.File
	file_speech_proto_rawDesc = nil
	file_speech_proto_goTypes = nil
	file_speech_proto_depIdxs = nil
}
